{"version":3,"file":"ngx-captcha.mjs","sources":["../../src/lib/services/script.service.ts","../../src/lib/components/base-re-captcha-component.directive.ts","../../src/lib/models/recaptcha-type.enum.ts","../../src/lib/components/invisible-recaptcha.component.ts","../../src/lib/components/recaptcha-2.component.ts","../../src/lib/services/recaptcha_v3.service.ts","../../src/public_api.ts","../../src/ngx-captcha.ts"],"sourcesContent":["import { Injectable, NgZone } from \"@angular/core\";\nimport { RecaptchaConfiguration } from \"../models/recaptcha-configuration\";\n\n@Injectable({\n\tprovidedIn: \"root\",\n})\nexport class ScriptService {\n\tprivate readonly scriptElemId: string = \"ngx-catpcha-script\";\n\n\t/**\n\t * Name of the global google recaptcha script\n\t */\n\tprotected readonly windowGrecaptcha = \"grecaptcha\";\n\n\t/**\n\t * Name of enterprise property in the global google recaptcha script\n\t */\n\tprotected readonly windowGrecaptchaEnterprise = \"enterprise\";\n\n\t/**\n\t * Name of the global callback\n\t */\n\tprotected readonly windowOnLoadCallbackProperty =\n\t\t\"ngx_captcha_onload_callback\";\n\n\t/**\n\t * Name of the global callback for enterprise\n\t */\n\tprotected readonly windowOnLoadEnterpriseCallbackProperty =\n\t\t\"ngx_captcha_onload_enterprise_callback\";\n\n\tprotected readonly globalDomain: string = \"recaptcha.net\";\n\n\tprotected readonly defaultDomain: string = \"google.com\";\n\n\tprotected readonly enterpriseApi: string = \"enterprise.js\";\n\n\tprotected readonly defaultApi: string = \"api.js\";\n\n\tregisterCaptchaScript(\n\t\tconfig: RecaptchaConfiguration,\n\t\trender: string,\n\t\tonLoad: (grecaptcha: any) => void,\n\t\tlanguage?: string\n\t): void {\n\t\tif (this.#grecaptchaScriptLoaded(config.useEnterprise)) {\n\t\t\t// recaptcha script is already loaded\n\t\t\t// just call the callback\n\t\t\tif (config.useEnterprise) {\n\t\t\t\tonLoad(\n\t\t\t\t\t(window as any)[this.windowGrecaptcha][\n\t\t\t\t\tthis.windowGrecaptchaEnterprise\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tonLoad((window as any)[this.windowGrecaptcha]);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// we need to patch the callback through global variable, otherwise callback is not accessible\n\t\t// note: https://github.com/Enngage/ngx-captcha/issues/2\n\t\tif (config.useEnterprise) {\n\t\t\t(window as any)[this.#getCallbackName(true)] = <any>(\n\t\t\t\t(() =>\n\t\t\t\t\tonLoad.bind(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t(window as any)[this.windowGrecaptcha][\n\t\t\t\t\t\tthis.windowGrecaptchaEnterprise\n\t\t\t\t\t\t]\n\t\t\t\t\t)\n\t\t\t\t));\n\t\t} else {\n\t\t\t(window as any)[this.#getCallbackName(false)] = <any>(\n\t\t\t\t(() =>\n\t\t\t\t\tonLoad.bind(this, (window as any)[this.windowGrecaptcha])\n\t\t\t\t));\n\t\t}\n\n\t\t// prepare script elem\n\t\tconst scriptElem = document.createElement(\"script\");\n\t\tscriptElem.id = this.scriptElemId;\n\t\tscriptElem.innerHTML = \"\";\n\t\tscriptElem.src = this.#getCaptchaScriptUrl(config, render, language);\n\t\tscriptElem.async = true;\n\t\tscriptElem.defer = true;\n\n\t\t// add script to header\n\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\n\t}\n\n\tcleanup(): void {\n\t\tconst elem = document.getElementById(this.scriptElemId);\n\n\t\tif (elem) {\n\t\t\telem.remove();\n\t\t}\n\t\t(window as any)[this.#getCallbackName()] = undefined;\n\t\t(window as any)[this.windowGrecaptcha] = undefined;\n\t}\n\n\t/**\n\t * Indicates if google recaptcha script is available and ready to be used\n\t */\n\t#grecaptchaScriptLoaded(useEnterprise?: boolean): boolean {\n\t\tif (\n\t\t\t!(window as any)[this.#getCallbackName(useEnterprise)] ||\n\t\t\t!(window as any)[this.windowGrecaptcha]\n\t\t) {\n\t\t\treturn false;\n\t\t} else if (\n\t\t\tuseEnterprise &&\n\t\t\t(window as any)[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]\n\t\t) {\n\t\t\treturn true;\n\t\t\t// if only enterprise script is loaded we need to check some v3's method\n\t\t} else if ((window as any)[this.windowGrecaptcha].execute) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Gets global callback name\n\t * @param useEnterprise Optional flag for enterprise script\n\t * @private\n\t */\n\t#getCallbackName(useEnterprise?: boolean): string {\n\t\treturn useEnterprise\n\t\t\t? this.windowOnLoadEnterpriseCallbackProperty\n\t\t\t: this.windowOnLoadCallbackProperty;\n\t}\n\n\t/**\n\t * Url to google api script\n\t */\n\t#getCaptchaScriptUrl(\n\t\tconfig: RecaptchaConfiguration,\n\t\trender: string,\n\t\tlanguage?: string\n\t): string {\n\t\tconst domain = config.useGlobalDomain\n\t\t\t? this.globalDomain\n\t\t\t: this.defaultDomain;\n\t\tconst api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\n\t\tconst callback = this.#getCallbackName(config.useEnterprise);\n\n\t\tconst captchaUrl = new URL(`https://www.${domain}`);\n\n\t\tcaptchaUrl.pathname = `recaptcha/${api}`;\n\t\tcaptchaUrl.searchParams.set('onload', callback);\n\t\tcaptchaUrl.searchParams.set('render', render);\n\n\t\tif (language) {\n\t\t\tcaptchaUrl.searchParams.set('hl', language);\n\t\t}\n\n\t\treturn captchaUrl.href;\n\t}\n}\n","import {\n\tAfterViewChecked,\n\tAfterViewInit,\n\tDirective,\n\tElementRef,\n\tEventEmitter,\n\tinject,\n\tInjector,\n\tinput,\n\tInput,\n\tNgZone,\n\tOnChanges,\n\toutput,\n\tOutput,\n\tRenderer2,\n\tSignal,\n\tSimpleChanges,\n} from \"@angular/core\";\nimport {\n\tAbstractControl,\n\tControlValueAccessor,\n\tNgControl,\n} from \"@angular/forms\";\n\nimport { ReCaptchaType } from \"../models/recaptcha-type.enum\";\nimport { ScriptService } from \"../services/script.service\";\n\n@Directive()\nexport abstract class BaseReCaptchaComponentDirective\n\timplements OnChanges, ControlValueAccessor, AfterViewInit, AfterViewChecked {\n\t/**\n\t * Prefix of the captcha element\n\t */\n\tprotected readonly captchaElemPrefix = \"ngx_captcha_id_\";\n\n\t#setupCaptcha: boolean = true;\n\n\t/**\n\t * Google's site key.\n\t * You can find this under https://www.google.com/recaptcha\n\t */\n\treadonly siteKey = input<string>();\n\n\t/**\n\t * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\n\t */\n\treadonly useGlobalDomain = input<boolean>(false);\n\n\treadonly useEnterprise = input<boolean>(false);\n\n\t/**\n\t * Type\n\t */\n\treadonly type = input<\"audio\" | \"image\">(\"image\");\n\n\t/**\n\t * Language code. Auto-detects the user's language if unspecified.\n\t */\n\treadonly hl = input<string>();\n\n\t/**\n\t * Tab index\n\t */\n\treadonly tabIndex = input<number>(0);\n\n\t/**\n\t * Called when captcha receives successful response.\n\t * Captcha response token is passed to event.\n\t */\n\treadonly success = output<string>();\n\n\t/**\n\t * Called when captcha is loaded. Event receives id of the captcha\n\t */\n\treadonly load = output<void>();\n\n\t/**\n\t * Called when captcha is reset.\n\t */\n\treadonly reset = output<void>();\n\n\t/**\n\t * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\n\t */\n\treadonly ready = output<void>();\n\n\t/**\n\t * Error callback\n\t */\n\treadonly error = output<void>();\n\n\t/**\n\t * Expired callback\n\t */\n\treadonly expire = output<void>();\n\n\tabstract captchaWrapperElem?: Signal<ElementRef<any> | undefined>;\n\n\t/**\n\t * Indicates if captcha should be set on load\n\t */\n\t#setupAfterLoad = false;\n\n\t/**\n\t * Captcha element\n\t */\n\tprotected captchaElem?: HTMLElement;\n\n\t/**\n\t * Id of the captcha elem\n\t */\n\tprotected captchaId?: number;\n\n\t/**\n\t * Holds last response value\n\t */\n\tprotected currentResponse?: string;\n\n\t/**\n\t * If enabled, captcha will reset after receiving success response. This is useful\n\t * when invisible captcha need to be resolved multiple times on same page\n\t */\n\tprotected resetCaptchaAfterSuccess = false;\n\n\t/**\n\t * Captcha type\n\t */\n\tprotected abstract recaptchaType: ReCaptchaType;\n\n\t/**\n\t * Required by ControlValueAccessor\n\t */\n\tprotected onChange: (value: string | undefined) => void = (val) => { };\n\tprotected onTouched: (value: string | undefined) => void = (val) => { };\n\n\t/**\n\t * Indicates if captcha is loaded\n\t */\n\tisLoaded = false;\n\n\t/**\n\t * Reference to global reCaptcha API\n\t */\n\treCaptchaApi?: any;\n\n\t/**\n\t * Id of the DOM element wrapping captcha\n\t */\n\tcaptchaElemId?: string;\n\n\t/**\n\t * Form Control to be enable usage in reactive forms\n\t */\n\tcontrol?: AbstractControl | null;\n\n\treadonly #renderer = inject(Renderer2);\n\treadonly #injector = inject(Injector);\n\treadonly #scriptService = inject(ScriptService);\n\n\tngAfterViewInit() {\n\t\tthis.control = this.#injector.get<NgControl | undefined>(\n\t\t\tNgControl,\n\t\t\tundefined,\n\t\t\t{ optional: true }\n\t\t)?.control;\n\t}\n\n\tngAfterViewChecked(): void {\n\t\tif (this.#setupCaptcha) {\n\t\t\tthis.#setupCaptcha = false;\n\t\t\tthis.#setupComponent();\n\t\t}\n\t}\n\n\t/**\n\t * Gets reCaptcha properties\n\t */\n\tprotected abstract getCaptchaProperties(): any;\n\n\t/**\n\t * Used for captcha specific setup\n\t */\n\tprotected abstract captchaSpecificSetup(): void;\n\n\tngOnChanges(changes: SimpleChanges): void {\n\t\t// cleanup scripts if language changed because they need to be reloaded\n\t\tif (changes && changes[\"hl\"]) {\n\t\t\t// cleanup scripts when language changes\n\t\t\tif (\n\t\t\t\t!changes[\"hl\"].firstChange &&\n\t\t\t\tchanges[\"hl\"].currentValue !== changes[\"hl\"].previousValue\n\t\t\t) {\n\t\t\t\tthis.#scriptService.cleanup();\n\t\t\t}\n\t\t}\n\n\t\tif (changes && changes[\"useGlobalDomain\"]) {\n\t\t\t// cleanup scripts when domain changes\n\t\t\tif (\n\t\t\t\t!changes[\"useGlobalDomain\"].firstChange &&\n\t\t\t\tchanges[\"useGlobalDomain\"].currentValue !==\n\t\t\t\tchanges[\"useGlobalDomain\"].previousValue\n\t\t\t) {\n\t\t\t\tthis.#scriptService.cleanup();\n\t\t\t}\n\t\t}\n\n\t\tthis.#setupCaptcha = true;\n\t}\n\n\t/**\n\t * Gets captcha response as per reCaptcha docs\n\t */\n\tgetResponse(): string {\n\t\treturn this.reCaptchaApi.getResponse(this.captchaId);\n\t}\n\n\t/**\n\t * Gets Id of captcha widget\n\t */\n\tgetCaptchaId(): number | undefined {\n\t\treturn this.captchaId;\n\t}\n\n\t/**\n\t * Resets captcha\n\t */\n\tresetCaptcha(): void {\n\t\t// reset captcha using Google js api\n\t\tthis.reCaptchaApi.reset();\n\n\t\t// required due to forms\n\t\tthis.onChange(undefined);\n\t\tthis.onTouched(undefined);\n\n\t\t// trigger reset event\n\t\tthis.reset.emit();\n\t}\n\n\t/**\n\t * Gets last submitted captcha response\n\t */\n\tgetCurrentResponse(): string | undefined {\n\t\treturn this.currentResponse;\n\t}\n\n\t/**\n\t * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\n\t */\n\treloadCaptcha(): void {\n\t\tthis.#setupComponent();\n\t}\n\n\tprotected ensureCaptchaElem(captchaElemId: string): void {\n\t\tconst captchaElem = document.getElementById(captchaElemId);\n\n\t\tif (!captchaElem) {\n\t\t\tthrow Error(`Captcha element with id '${captchaElemId}' was not found`);\n\t\t}\n\n\t\t// assign captcha element\n\t\tthis.captchaElem = captchaElem;\n\t}\n\n\t/**\n\t * Responsible for instantiating captcha element\n\t */\n\tprotected renderReCaptcha(): void {\n\t\t// run outside angular zone due to timeout issues when testing\n\t\t// details: https://github.com/Enngage/ngx-captcha/issues/26\n\t\t// to fix reCAPTCHA placeholder element must be an element or id\n\t\t// https://github.com/Enngage/ngx-captcha/issues/96\n\t\tsetTimeout(() => {\n\t\t\tthis.captchaId = this.reCaptchaApi.render(\n\t\t\t\tthis.captchaElemId,\n\t\t\t\tthis.getCaptchaProperties()\n\t\t\t);\n\t\t\tthis.ready.emit();\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Called when captcha receives response\n\t * @param callback Callback\n\t */\n\tprotected handleCallback(callback: any): void {\n\t\tthis.currentResponse = callback;\n\t\tthis.success.emit(callback);\n\n\t\tthis.onChange(callback);\n\t\tthis.onTouched(callback);\n\n\t\tif (this.resetCaptchaAfterSuccess) {\n\t\t\tthis.resetCaptcha();\n\t\t}\n\t}\n\n\t#getPseudoUniqueNumber(): number {\n\t\treturn new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n\t}\n\n\t#setupComponent(): void {\n\t\t// captcha specific setup\n\t\tthis.captchaSpecificSetup();\n\n\t\t// create captcha wrapper\n\t\tthis.#createAndSetCaptchaElem();\n\n\t\tthis.#scriptService.registerCaptchaScript(\n\t\t\t{\n\t\t\t\tuseGlobalDomain: this.useGlobalDomain(),\n\t\t\t\tuseEnterprise: this.useEnterprise(),\n\t\t\t},\n\t\t\t\"explicit\",\n\t\t\t(grecaptcha) => {\n\t\t\t\tthis.#onloadCallback(grecaptcha);\n\t\t\t},\n\t\t\tthis.hl()\n\t\t);\n\t}\n\n\t/**\n\t * Called when google's recaptcha script is ready\n\t */\n\t#onloadCallback(grecapcha: any): void {\n\t\t// assign reference to reCaptcha Api once its loaded\n\t\tthis.reCaptchaApi = grecapcha;\n\n\t\tif (!this.reCaptchaApi) {\n\t\t\tthrow Error(`ReCaptcha Api was not initialized correctly`);\n\t\t}\n\n\t\t// loaded flag\n\t\tthis.isLoaded = true;\n\n\t\t// fire load event\n\t\tthis.load.emit();\n\n\t\t// render captcha\n\t\tthis.renderReCaptcha();\n\n\t\t// setup component if it was flagged as such\n\t\tif (this.#setupAfterLoad) {\n\t\t\tthis.#setupAfterLoad = false;\n\t\t\tthis.#setupComponent();\n\t\t}\n\t}\n\n\t#generateNewElemId(): string {\n\t\treturn this.captchaElemPrefix + this.#getPseudoUniqueNumber();\n\t}\n\n\t#createAndSetCaptchaElem(): void {\n\t\t// generate new captcha id\n\t\tthis.captchaElemId = this.#generateNewElemId();\n\n\t\tif (!this.captchaElemId) {\n\t\t\tthrow Error(`Captcha elem Id is not set`);\n\t\t}\n\n\t\tif (!this.captchaWrapperElem?.()) {\n\t\t\tthrow Error(`Captcha DOM element is not initialized`);\n\t\t}\n\n\t\t// remove old html\n    if (this.captchaWrapperElem()) {\n      this.captchaWrapperElem()!.nativeElement.innerHTML = \"\";\n    }\n\n\t\t// create new wrapper for captcha\n\t\tconst newElem = this.#renderer.createElement(\"div\");\n\t\tnewElem.id = this.captchaElemId;\n\n\t\tthis.#renderer.appendChild(this.captchaWrapperElem()?.nativeElement, newElem);\n\n\t\t// when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\n\t\t// to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\n\t\tsetTimeout(() => {\n\t\t\t// update captcha elem\n\t\t\tif (this.captchaElemId) {\n\t\t\t\tthis.ensureCaptchaElem(this.captchaElemId);\n\t\t\t}\n\t\t}, 0);\n\t}\n\n\t/**\n\t * To be aligned with the ControlValueAccessor interface we need to implement this method\n\t * However as we don't want to update the recaptcha, this doesn't need to be implemented\n\t */\n\twriteValue(obj: any): void { }\n\n\t/**\n\t * This method helps us tie together recaptcha and our formControl values\n\t */\n\tregisterOnChange(fn: any): void {\n\t\tthis.onChange = fn;\n\t}\n\n\t/**\n\t * At some point we might be interested whether the user has touched our component\n\t */\n\tregisterOnTouched(fn: any): void {\n\t\tthis.onTouched = fn;\n\t}\n\n\t/**\n\t * Handles error callback\n\t */\n\tprotected handleErrorCallback(): void {\n\t\tthis.onChange(undefined);\n\t\tthis.onTouched(undefined);\n\n\t\tthis.error.emit();\n\t}\n\n\t/**\n\t * Handles expired callback\n\t */\n\tprotected handleExpireCallback(): void {\n\t\tthis.expire.emit();\n\n\t\t// reset captcha on expire callback\n\t\tthis.resetCaptcha();\n\t}\n}\n","export enum ReCaptchaType {\n    InvisibleReCaptcha,\n    ReCaptcha2\n}\n","import {\n\tChangeDetectionStrategy,\n\tComponent,\n\tElementRef,\n\tinput,\n\tviewChild,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\nimport { BaseReCaptchaComponentDirective } from './base-re-captcha-component.directive';\n\n@Component({\n\tselector: 'ngx-invisible-recaptcha',\n\ttemplate: `\n  <div #captchaWrapperElem></div>`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: InvisibleReCaptchaComponent,\n\t\t\tmulti: true,\n\t\t}\n\t]\n})\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponentDirective {\n\n\t/**\n\t * This size representing invisible captcha\n\t */\n\tprotected readonly size = 'invisible';\n\n\t/**\n\t * Theme\n\t */\n\treadonly theme = input<'dark' | 'light'>('light');\n\n\t/**\n\t * Badge\n\t */\n\treadonly badge = input<'bottomright' | 'bottomleft' | 'inline'>('bottomright');\n\n\treadonly captchaWrapperElem = viewChild<ElementRef>('captchaWrapperElem')\n\n\tprotected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\n\n\t/**\n\t * Programmatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\n\t */\n\texecute(): void {\n\t\t// execute captcha\n\t\tthis.reCaptchaApi.execute(this.captchaId);\n\t}\n\n\tprotected captchaSpecificSetup(): void {\n\t}\n\n\t/**\n\t* Gets reCaptcha properties\n\t*/\n\tprotected getCaptchaProperties(): any {\n\t\treturn {\n\t\t\t'sitekey': this.siteKey,\n\t\t\t'callback': (response: any) => this.handleCallback(response),\n\t\t\t'expired-callback': () => this.handleExpireCallback(),\n\t\t\t'error-callback': () => this.handleErrorCallback(),\n\t\t\t'badge': this.badge,\n\t\t\t'type': this.type,\n\t\t\t'tabindex': this.tabIndex,\n\t\t\t'size': this.size,\n\t\t\t'theme': this.theme\n\t\t};\n\t}\n}\n","import {\n\tChangeDetectionStrategy,\n\tComponent,\n\tElementRef,\n\tinput,\n\tOnDestroy,\n\tviewChild,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\nimport { BaseReCaptchaComponentDirective } from './base-re-captcha-component.directive';\n\n@Component({\n\tselector: 'ngx-recaptcha2',\n\ttemplate: `\n  <div #captchaWrapperElem></div>`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: ReCaptcha2Component,\n\t\t\tmulti: true,\n\t\t}\n\t]\n})\nexport class ReCaptcha2Component extends BaseReCaptchaComponentDirective implements OnDestroy {\n\n\t/**\n\t* Name of the global expire callback\n\t*/\n\tprotected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n\n\t/**\n\t* Name of the global error callback\n\t*/\n\tprotected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n\n\t/**\n\t * Theme\n\t */\n\treadonly theme = input<'dark' | 'light'>('light');\n\n\t/**\n\t* Size\n\t*/\n\treadonly size = input<'compact' | 'normal'>('normal');\n\n\n\treadonly captchaWrapperElem = viewChild<ElementRef>('captchaWrapperElem')\n\n\tprotected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\n\n\tngOnDestroy(): void {\n\t\t(window as any)[this.windowOnErrorCallbackProperty] = {};\n\t\t(window as any)[this.windowOnExpireCallbackProperty] = {};\n\t}\n\n\tprotected captchaSpecificSetup(): void {\n\t\tthis.#registerCallbacks();\n\t}\n\n\t/**\n\t * Gets reCaptcha properties\n\t*/\n\tprotected getCaptchaProperties(): any {\n\t\treturn {\n\t\t\t'sitekey': this.siteKey,\n\t\t\t'callback': (response: any) => this.handleCallback(response),\n\t\t\t'expired-callback': () => this.handleExpireCallback(),\n\t\t\t'error-callback': () => this.handleErrorCallback(),\n\t\t\t'theme': this.theme,\n\t\t\t'type': this.type,\n\t\t\t'size': this.size,\n\t\t\t'tabindex': this.tabIndex\n\t\t};\n\t}\n\n\t/**\n\t * Registers global callbacks\n\t*/\n\t#registerCallbacks(): void {\n\t\t(window as any)[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\n\t\t(window as any)[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\n\t}\n}\n","import { inject, Injectable, NgZone } from \"@angular/core\";\n\nimport { ScriptService } from \"./script.service\";\nimport { RecaptchaConfiguration } from \"../models/recaptcha-configuration\";\n\n@Injectable({\n\tprovidedIn: \"root\",\n})\nexport class ReCaptchaV3Service {\n\treadonly #scriptService = inject(ScriptService)\n\n\t/**\n\t * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\n\t * this callback in your backend to get meaningful results.\n\t *\n\t * For more information see https://developers.google.com/recaptcha/docs/v3\n\t * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\n\t *\n\t * @param siteKey Site key found in your google admin panel\n\t * @param action Action to log\n\t * @param callback Callback function to to handle token\n\t * @param config Optional configuration like useGlobalDomain to be provided\n\t * @param errorCallback Optional Callback function to handle errors\n\t */\n\texecute(\n\t\tsiteKey: string,\n\t\taction: string,\n\t\tcallback: (token: string) => void,\n\t\tconfig?: RecaptchaConfiguration,\n\t\terrorCallback?: (error: any) => void\n\t): void {\n\t\tthis.executeAsPromise(siteKey, action, config)\n\t\t\t.then(callback)\n\t\t\t.catch((error) =>\n\t\t\t\terrorCallback ? errorCallback(error) : console.error(error)\n\t\t\t);\n\t}\n\n\t/**\n\t * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\n\t * this token in your backend to get meaningful results.\n\t *\n\t * For more information see https://developers.google.com/recaptcha/docs/v3\n\t * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\n\t *\n\t * @param siteKey Site key found in your google admin panel\n\t * @param action Action to log\n\t * @param config Optional configuration like useGlobalDomain to be provided\n\t */\n\texecuteAsPromise(\n\t\tsiteKey: string,\n\t\taction: string,\n\t\tconfig?: RecaptchaConfiguration\n\t): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst configuration = config || {};\n\n\t\t\tconst onRegister = (grecaptcha: any) => {\n\t\t\t\ttry {\n\t\t\t\t\tgrecaptcha\n\t\t\t\t\t\t.execute(siteKey, { action })\n\t\t\t\t\t\t.then((token: any) => resolve(token));\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.#scriptService.registerCaptchaScript(\n\t\t\t\tconfiguration,\n\t\t\t\tsiteKey,\n\t\t\t\tonRegister\n\t\t\t);\n\t\t});\n\t}\n}\n","/*\n * Public API\n */\n\nexport * from './lib/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}